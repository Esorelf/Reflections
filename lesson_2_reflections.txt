What happens when you initialize a repository? Why do you need to do it?

When initializing a repository, git creates an empty repository in the chosen directory, allowing the files in the chosen directory to be able to be added into the repository, to be saved under a commit.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is the middle ground between the working directory and repository. It allows the user to add the files they choose into the repository, ready to be committed if desired. The value in choosing what files do add into a group ready to be committed is that while creating a repository from the working directory will allow the grouping of related files, the staging area enables the user to break down the files into even more specifically related groups


How can you use the staging area to make sure you have one commit per logical change? 

The staging area allows me to add files that were changed, so that I can commit them. This helps ensuring I commit every logical change, because when I add a file to the staging area, I can use git diff to compare the file to its most recent commit, and thus see if there are significant enough changes to make a new commit.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If I were creating Virtual Reality game, and learned about a cool new technique in which I could add in NPC's, I might want to create a separate branch in which I could experiment with said technique, while retaining the working version of the game in the master branch. The separate branches would allow me to progress with the main game and the experimental version, and if I eventually made the experimental work, I would be able to combine the most recent commits of the two branches.


How do the diagrams help you visualize the branch structure?

The diagrams allow me to see which commits are part of which branch, and at what point in time the branches were created. They let me see the changes made in each branch, and if branches were created from those branches.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When two branches are merged, the new branch is a combination of the commits of both branches. The way it is represented in the diagram shows how there are two existing branches with their respective commits, and how they are combined and saved into one commit, so that you have one version to develop, while still having access to the separate commits.